<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Node <%= node.name %></title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom@2.0.1"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
      tailwind.config = {
        theme: {
          extend: {
            animation: {
              "fade-in": "fadeIn 0.5s ease-in-out",
            },
            keyframes: {
              fadeIn: {
                "0%": { opacity: "0" },
                "100%": { opacity: "1" },
              },
            },
          },
        },
      };
    </script>
    <style>
      .glass-morphism {
        background: rgba(30, 41, 59, 0.6);
        backdrop-filter: blur(12px);
        border: 1px solid rgba(255, 255, 255, 0.1);
      }
      .mesh-bg {
        /* MODIFIED: Animation and oversized background-size removed for a static gradient */
        background: linear-gradient(135deg, #1e293b 0%, #0f172a 50%, #1e1b4b 100%);
      }
      canvas {
        width: 100% !important;
        height: 280px !important;
      }
    </style>
  </head>
  <body class="min-h-screen mesh-bg text-slate-200 overflow-x-hidden p-4 md:p-8">
    <!-- Animated background elements -->
    <div class="fixed inset-0 overflow-hidden pointer-events-none -z-10">
      <div
        class="absolute -top-40 -right-40 w-96 h-96 bg-purple-600 rounded-full mix-blend-screen filter blur-3xl opacity-20"
      ></div>
      <div
        class="absolute -bottom-40 -left-40 w-96 h-96 bg-blue-600 rounded-full mix-blend-screen filter blur-3xl opacity-20"
      ></div>
    </div>

    <div class="max-w-7xl mx-auto space-y-6 animate-fade-in">
      <!-- Header -->
      <header class="flex flex-wrap justify-between items-center gap-4">
        <h1
          class="text-4xl font-bold bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent"
        >
          Node: <%= node.name %>
          <span class="block text-lg text-slate-400 font-normal mt-1"
            >(<%= node.ip %>)</span
          >
        </h1>
        <a
          href="/"
          class="glass-morphism px-5 py-2.5 rounded-xl hover:bg-white/10 transition-all duration-300 flex items-center gap-2 font-semibold"
        >
          <svg class="w-5 h-5" fill="currentColor">
            <use xlink:href="/icons.svg#icon-back" />
          </svg>
          Back to Dashboard
        </a>
      </header>

      <!-- Controls -->
      <div
        class="glass-morphism rounded-2xl p-4 md:p-6 flex items-center gap-3 flex-wrap"
      >
        <label class="text-slate-300 font-medium">View:</label>
        <select
          id="timeRange"
          class="glass-morphism px-3 py-2 rounded-lg focus:ring-2 focus:ring-blue-500 focus:outline-none transition"
        >
          <option value="1 HOUR" selected>Last Hour</option>
          <option value="1 DAY">Last Day</option>
          <option value="7 DAYS">Last Week</option>
          <option value="1 MONTH">Last Month</option>
          <option value="3 MONTHS">Last 3 Months</option>
        </select>
        <button
          id="pauseBtn"
          class="glass-morphism px-3 py-2 text-sm rounded-lg hover:bg-white/10 transition-all flex items-center gap-2"
        >
          <svg class="w-4 h-4" fill="currentColor">
            <use xlink:href="/icons.svg#icon-pause" />
          </svg>
          Pause
        </button>
        <button
          id="mtrBtn"
          class="glass-morphism px-3 py-2 text-sm rounded-lg hover:bg-white/10 transition-all flex items-center gap-2"
        >
          <svg class="w-4 h-4" fill="currentColor">
            <use xlink:href="/icons.svg#icon-mtr" />
          </svg>
          Run MTR
        </button>
        <button
          id="traceBtn"
          class="glass-morphism px-3 py-2 text-sm rounded-lg hover:bg-white/10 transition-all flex items-center gap-2"
        >
          <svg class="w-4 h-4" fill="currentColor">
            <use xlink:href="/icons.svg#icon-traceroute" />
          </svg>
          Run Traceroute
        </button>
        <span class="text-slate-400 text-sm flex items-center gap-2 ml-auto">
          <svg class="w-4 h-4" fill="currentColor">
            <use xlink:href="/icons.svg#icon-warning" />
          </svg>
          Drag to zoom, rightâ€‘click to reset chart
        </span>
      </div>

      <!-- Stats Summary -->
      <div
        class="glass-morphism rounded-2xl p-6 grid grid-cols-1 sm:grid-cols-3 gap-6 text-center"
      >
        <div>
          <h3 class="text-sm font-semibold text-blue-300 uppercase tracking-wider">
            Avg Latency
          </h3>
          <p class="text-3xl font-bold text-blue-400 mt-1">
            <span id="avgLatency">--</span>
            <span class="text-lg text-slate-400 font-medium ml-1">ms</span>
          </p>
        </div>
        <div>
          <h3 class="text-sm font-semibold text-red-400 uppercase tracking-wider">
            Avg Packet Loss
          </h3>
          <p class="text-3xl font-bold text-red-400 mt-1">
            <span id="avgLoss">--</span>
            <span class="text-lg text-slate-400 font-medium ml-1">%</span>
          </p>
        </div>
        <div>
          <h3
            class="text-sm font-semibold text-green-400 uppercase tracking-wider"
          >
            Avg Jitter
          </h3>
          <p class="text-3xl font-bold text-green-400 mt-1">
            <span id="avgJitter">--</span>
            <span class="text-lg text-slate-400 font-medium ml-1">ms</span>
          </p>
        </div>
      </div>

      <!-- Charts -->
      <div class="space-y-6">
        <div class="glass-morphism rounded-2xl p-4 md:p-6">
          <h2 class="text-lg font-semibold text-blue-300 mb-4">Latency (ms)</h2>
          <canvas id="latencyChart"></canvas>
        </div>
        <div class="glass-morphism rounded-2xl p-4 md:p-6">
          <h2 class="text-lg font-semibold text-red-400 mb-4">
            Packet Loss (%)
          </h2>
          <canvas id="lossChart"></canvas>
        </div>
        <div class="glass-morphism rounded-2xl p-4 md:p-6">
          <h2 class="text-lg font-semibold text-green-400 mb-4">Jitter (ms)</h2>
          <canvas id="jitterChart"></canvas>
        </div>
      </div>
    </div>

    <script>
      let charts = [];
      let liveUpdatesPaused = false;
      let currentRange = "1 HOUR";

      function createGradient(ctx, color, opacity = "88") {
        const gradient = ctx.createLinearGradient(0, 0, 0, 280);
        gradient.addColorStop(0, color + opacity);
        gradient.addColorStop(1, color + "00");
        return gradient;
      }

      function getTimeWindow(range) {
        const now = Date.now();
        switch (range) {
          case "1 HOUR":
            return { min: now - 60 * 60 * 1000, max: now };
          case "1 DAY":
            return { min: now - 24 * 60 * 60 * 1000, max: now };
          case "7 DAYS":
            return { min: now - 7 * 24 * 60 * 60 * 1000, max: now };
          case "1 MONTH":
            return { min: now - 30 * 24 * 60 * 60 * 1000, max: now };
          case "3 MONTHS":
            return { min: now - 90 * 24 * 60 * 60 * 1000, max: now };
          default:
            return { min: null, max: null };
        }
      }

      function resetChartZoom(chart) {
        const { min, max } = getTimeWindow(currentRange);
        if (typeof chart.resetZoom === "function") chart.resetZoom();
        chart.options.scales.x.min = min;
        chart.options.scales.x.max = max;
        chart.update();
      }

      function avg(arr) {
        const values = arr.filter((p) => p.y !== null);
        if (!values.length) return 0;
        return (
          values.reduce((sum, p) => sum + p.y, 0) / values.length
        ).toFixed(2);
      }

      async function loadData(range = "1 HOUR") {
        currentRange = range;
        const res = await fetch(
          `/api/nodes/<%= node.id %>/stats?range=${encodeURIComponent(range)}`
        );
        const data = await res.json();

        const latencyData = data.map((d) => ({
          x: new Date(d.timestamp).getTime(),
          y: d.latency !== null ? d.latency : null,
        }));
        const lossData = data.map((d) => ({
          x: new Date(d.timestamp).getTime(),
          y: d.packet_loss ?? 0,
        }));
        const jitterData = data.map((d) => ({
          x: new Date(d.timestamp).getTime(),
          y: d.jitter !== null ? d.jitter : null,
        }));

        document.getElementById("avgLatency").textContent = avg(latencyData);
        document.getElementById("avgLoss").textContent = avg(lossData);
        document.getElementById("avgJitter").textContent = avg(jitterData);

        charts.forEach((c) => c.destroy());
        charts = [];

        const { min, max } = getTimeWindow(range);

        const baseOptions = {
          responsive: true,
          maintainAspectRatio: false,
          interaction: {
            mode: "index",
            intersect: false,
          },
          plugins: {
            legend: { display: false },
            tooltip: {
              enabled: true,
              backgroundColor: "rgba(15, 23, 42, 0.8)",
              borderColor: "rgba(255, 255, 255, 0.1)",
              borderWidth: 1,
              titleFont: { weight: "bold" },
              padding: 10,
              displayColors: false,
            },
            zoom: {
              zoom: {
                drag: {
                  enabled: true,
                  backgroundColor: "rgba(96, 165, 250, 0.2)",
                  borderColor: "#60a5fa",
                },
                mode: "x",
              },
            },
          },
          scales: {
            x: {
              type: "time",
              min,
              max,
              time: {
                tooltipFormat: "MMM d, HH:mm:ss",
                displayFormats: {
                  minute: "HH:mm",
                  hour: "MMM d HH:mm",
                  day: "MMM d",
                  month: "MMM yyyy",
                },
              },
              ticks: { color: "#94a3b8" },
              grid: { color: "rgba(255,255,255,0.05)" },
            },
            y: {
              beginAtZero: true,
              ticks: { color: "#94a3b8", precision: 2 },
              grid: { color: "rgba(255,255,255,0.1)" },
            },
          },
        };

        function createChart(ctx, color, label, data) {
          const chartOptions = JSON.parse(JSON.stringify(baseOptions));
          chartOptions.plugins.tooltip.callbacks = {
            label: (context) => `${context.dataset.label}: ${context.formattedValue} ms`,
          };

          return new Chart(ctx, {
            type: "line",
            data: {
              datasets: [
                {
                  label,
                  data,
                  borderColor: color,
                  backgroundColor: createGradient(ctx, color),
                  fill: true,
                  tension: 0.4,
                  pointRadius: 0,
                  spanGaps: false,
                },
              ],
            },
            options: chartOptions,
          });
        }

        // --- Create Charts ---
        charts.push(
          createChart(
            document.getElementById("latencyChart").getContext("2d"),
            "#60a5fa",
            "Latency",
            latencyData
          )
        );

        const lossOptions = JSON.parse(JSON.stringify(baseOptions));
        lossOptions.scales.y.max = 100;
        lossOptions.plugins.tooltip.callbacks = {
          label: (context) => `${context.dataset.label}: ${context.formattedValue}%`,
        };
        charts.push(
          new Chart(document.getElementById("lossChart").getContext("2d"), {
            type: "line",
            data: {
              datasets: [
                {
                  label: "Loss",
                  data: lossData,
                  borderColor: "#f87171",
                  backgroundColor: createGradient(
                    document.getElementById("lossChart").getContext("2d"),
                    "#f87171"
                  ),
                  fill: true,
                  tension: 0.4,
                  pointRadius: 0,
                  stepped: true, // Packet loss is better visualized as stepped
                },
              ],
            },
            options: lossOptions,
          })
        );

        charts.push(
          createChart(
            document.getElementById("jitterChart").getContext("2d"),
            "#4ade80",
            "Jitter",
            jitterData
          )
        );
      }

      document.addEventListener("contextmenu", (e) => {
        charts.forEach((chart) => {
          if (chart.canvas.contains(e.target)) {
            e.preventDefault();
            resetChartZoom(chart);
          }
        });
      });

      document
        .getElementById("timeRange")
        .addEventListener("change", (e) => loadData(e.target.value));
      loadData("1 HOUR");

      document
        .getElementById("pauseBtn")
        .addEventListener("click", async () => {
          liveUpdatesPaused = !liveUpdatesPaused;
          const btn = document.getElementById("pauseBtn");
          const useTag = btn.querySelector("use");
          if (liveUpdatesPaused) {
            btn.innerHTML = `<svg class="w-4 h-4" fill="currentColor"><use xlink:href="/icons.svg#icon-resume" /></svg> Resume`;
            btn.classList.add("text-green-400");
          } else {
            btn.innerHTML = `<svg class="w-4 h-4" fill="currentColor"><use xlink:href="/icons.svg#icon-pause" /></svg> Pause`;
            btn.classList.remove("text-green-400");
            await loadData(document.getElementById("timeRange").value);
          }
        });

      const socket = io();
      socket.on("pingUpdate", (data) => {
        if (data.nodeId === <%= node.id %> && !liveUpdatesPaused) {
          const ts = new Date(data.timestamp).getTime();
          const values = [
            data.latency !== null ? data.latency : null,
            data.packetLoss ?? 0,
            data.jitter !== null ? data.jitter : null,
          ];
          const { min, max } = getTimeWindow(currentRange);

          values.forEach((val, i) => {
            const chart = charts[i];
            if (!chart) return;
            const set = chart.data.datasets[0].data;
            set.push({ x: ts, y: val });
            chart.data.datasets[0].data = set.filter((p) => p.x >= min);
            chart.options.scales.x.min = min;
            chart.options.scales.x.max = max;
            chart.update("none");
          });

          document.getElementById("avgLatency").textContent = avg(
            charts[0].data.datasets[0].data
          );
          document.getElementById("avgLoss").textContent = avg(
            charts[1].data.datasets[0].data
          );
          document.getElementById("avgJitter").textContent = avg(
            charts[2].data.datasets[0].data
          );
        }
      });

      async function runTool(btnId, endpoint, title) {
        const btn = document.getElementById(btnId);
        const originalContent = btn.innerHTML;
        btn.disabled = true;
        btn.innerHTML = `
          <svg class="animate-spin w-4 h-4" fill="currentColor"><use xlink:href="/icons.svg#icon-spinner"/></svg>
          Running...
        `;
        try {
          const res = await fetch(`/api/nodes/<%= node.id %>/${endpoint}`);
          const data = await res.json();
          if (data.output) showResultModal(title, data.output);
          else alert(`${title} failed: ${data.error || "Unknown error"}`);
        } catch (err) {
          alert(`${title} request failed: ` + err.message);
        }
        btn.disabled = false;
        btn.innerHTML = originalContent;
      }

      document
        .getElementById("mtrBtn")
        .addEventListener("click", () => runTool("mtrBtn", "mtr", "MTR Results"));
      document
        .getElementById("traceBtn")
        .addEventListener("click", () =>
          runTool("traceBtn", "traceroute", "Traceroute Results")
        );

      function showResultModal(title, output) {
        const modal = document.createElement("div");
        modal.className =
          "fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-50 p-4 animate-fade-in";
        modal.innerHTML = `
        <div class="glass-morphism rounded-2xl shadow-2xl w-full max-w-4xl max-h-[85vh] flex flex-col">
          <header class="p-4 border-b border-white/10 flex justify-between items-center">
            <h2 class="text-xl font-semibold bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">${title}</h2>
            <button onclick="this.closest('.fixed').remove()" class="w-8 h-8 rounded-full hover:bg-white/10 flex items-center justify-center transition">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
            </button>
          </header>
          <div class="p-4 bg-slate-900/50 flex-grow overflow-auto">
            <pre class="whitespace-pre-wrap text-sm text-slate-300 break-words">${output}</pre>
          </div>
          <footer class="p-4 text-right border-t border-white/10">
            <button onclick="this.closest('.fixed').remove()" class="glass-morphism px-4 py-2 text-sm rounded-lg hover:bg-white/10 transition-all">Close</button>
          </footer>
        </div>
      `;
        modal.addEventListener("click", (e) => {
          if (e.target === modal) modal.remove();
        });
        document.body.appendChild(modal);
      }
    </script>
  </body>
</html>